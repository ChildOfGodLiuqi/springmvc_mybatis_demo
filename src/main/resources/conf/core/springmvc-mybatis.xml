<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		">
	<!--引入jdbc属性配置文件 -->
	<context:property-placeholder location="classpath:conf/core/jdbc.properties"/>
	
	<!--读写分离 -->
	<!-- 配置jdbc read数据源(使用c3p0) -->
	<bean id="readDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据库基本连接信息 -->
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始连接数 -->
		<property name="initialPoolSize" value="3" />
		<!-- 保持最小连接数 -->
		<property name="minPoolSize" value="3" />
		<!-- 保持最大连接数 -->
		<property name="maxPoolSize" value="5" />
		<property name="acquireIncrement" value="3" />
		<property name="maxIdleTime" value="1800" />
	</bean>
	<!-- myBatis read配置 -->
	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="readsqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="readDataSource" />
		<!-- mybatis 数据访问配置文件 -->
		<property name="mapperLocations" value="classpath:conf/mybatis/reader/*Mapper.xml" />
	</bean>
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zxl.sp.dao.reader" />
		<property name="sqlSessionFactoryBeanName" value="readsqlSessionFactory" />
	</bean>

	<!-- 配置jdbc write数据源(使用c3p0) -->
	<bean id="writeDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据库基本连接信息 -->
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始连接数 -->
		<property name="initialPoolSize" value="3" />
		<!-- 保持最小连接数 -->
		<property name="minPoolSize" value="3" />
		<!-- 保持最大连接数 -->
		<property name="maxPoolSize" value="5" />
		<property name="acquireIncrement" value="3" />
		<property name="maxIdleTime" value="1800" />
	</bean>
	<!-- myBatis read配置 -->
	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="writesqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="writeDataSource" />
		<!-- mybatis 数据访问配置文件 -->
		<property name="mapperLocations" value="classpath:conf/mybatis/writer/*Mapper.xml" />
	</bean>
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zxl.sp.dao.writer" />
		<property name="sqlSessionFactoryBeanName" value="writesqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="writeDataSource" />
	</bean>
	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	
	<!-- 拦截器方式配置事物 -->
	<!-- 通知 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- name属性表示那些方法会被进行事务管理 -->
			<!--  -->
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.zxl.sp.serviceImpl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

</beans>